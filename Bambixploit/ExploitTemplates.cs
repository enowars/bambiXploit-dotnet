namespace Bambixploit
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    public static class ExploitTemplates
    {
        public static readonly string HttpTemplate = @"#!/usr/bin/env python3

import json
import requests
import sys
from typing import Optional

TARGET = sys.argv[1] # The target's ip address is passed as an command line argument

session = requests.Session()

def exploit(hint: Optional[str], flag_store: Optional[int]):
    print(f'Attacking {TARGET} (flag_store={flag_store}, hint={hint}')
    # TODO implement exploit


# Some CTFs publish information ('flag hints') which help you getting individual flags (e.g. the usernames of users that deposited flags).
'''
# Bambi CTF / ENOWARS flag hints:
attack_info = requests.get('https://bambi.enoflag.de/scoreboard/attack.json').json()
service_info = attack_info['services']['TODO_INSERT_SERVICE_NAME_HERE']
team_info = service_info[TARGET] # Get the information for the current target
for round in team_info:
    round_info = team_info[round]
    for flag_store in round_info:
        store_info = round_info[flag_store]
        for flag_info in store_info:
            try:
                exploit(flag_info, flag_store) # flag_info will always be a string, which you might have to parse with json.loads
            except Exception as ex:
                print(ex)
'''

# In CTFs that do not publish flag hints you are on your own.
'''
exploit(None, None)
'''

";

        public static readonly string BinaryTemplate = @"#!/usr/bin/env python3
import sys
import requests

TARGET = sys.argv[1]

# hic sunt dracones
";

        public static void PrintTemplate(ExploitTemplate template)
        {
            switch (template)
            {
            case ExploitTemplate.Http:
                Console.Write(HttpTemplate);
                break;
            /* case ExploitTemplate.Binary:
                Console.Write(BinaryTemplate);
                break; */
            default:
                throw new InvalidOperationException();
            }
        }
    }
}
